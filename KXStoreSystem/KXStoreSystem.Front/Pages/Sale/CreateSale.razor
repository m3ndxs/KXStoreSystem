@page "/Sale/Create"

@using KXStoreSystem.Front.Models.Responses
@using System.Text.Json.Nodes

@inject HttpClient Http;
@inject NavigationManager navManager;

<div class="row">
    <div class="col-lg-8">
        <h1 class="mb-5">Nova Venda</h1>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Produto</label>
            <div class="col-md-8">
                <input class="form-control" @bind="saleData.ProductName" />
                <span class="text-danger">@Errors["ProductName"]?[0]</span>
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Valor</label>
            <div class="col-md-8">
                <input class="form-control" type="number" @bind="saleData.TotalValue" step="0.01">
                <span class="text-danger">@Errors["TotalValue"]?[0]</span>
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">ID Cliente</label>
            <div class="col-md-8">
                <input class="form-control" type="number" @bind="saleData.CustomerId">
                <span class="text-danger">@Errors["CustomerId"]?[0]</span>
            </div>
        </div>

        <div class="row mb-3">
            <label class="col-md-4 col-form-label">Data da Venda</label>
            <div class="col-md-8">
                <input class="form-control" type="date" @bind="saleData.Date">
                <span class="text-danger">@Errors["Date"]?[0]</span>
            </div>
        </div>

        <div class="row">
            <div class="offset-md-4 col-md-4 d-grid">
                <button class="btn btn-primary" @onclick="SaveSale">Salvar</button>
            </div>
            <div class="col-md-4 d-grid">
                <a class="btn btn-outline-primary" href="/Sale">Cancelar</a>
            </div>
        </div>
    </div>
</div>

@code {
    public AddSaleResponse saleData { get; set; } = new();
    public JsonNode Errors { get; set; } = new JsonObject();

    protected override void OnInitialized()
    {
        saleData.Date = DateTime.Now.Date;
    }

    protected async Task SaveSale()
    {
        if (!await IsCustomerValid(saleData.CustomerId))
        {
            Errors["CustomerId"] = new JsonArray { "Cliente não encontrado." };
            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:44344/api/Sale", saleData);

        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Sale");
        }
        else
        {
            var strResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Json Response: \n" + strResponse);

            try
            {
                var jsonResponse = JsonNode.Parse(strResponse);
                Errors = jsonResponse?["errors"] ?? new JsonObject();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error parsing response: " + ex.Message);
            }
        }
    }

    private async Task<bool> IsCustomerValid(int customerId)
    {
        var response = await Http.GetAsync($"https://localhost:44344/api/Customer/{customerId}");
        return response.IsSuccessStatusCode;
    }
}