@page "/Customer/Edit/{Id:int}"

@using System.Text.Json.Nodes;
@using KXStoreSystem.Front.Models.Responses;

@inject HttpClient Http;
@inject NavigationManager navManager;

<div class="row">
    <div class="col-lg-8">
        <h1 class="mb-5">Editar Cliente</h1>

        @if (customer == null)
        {
            <p><em>Carregando...</em></p>
        }
        else
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Cliente ID</label>
                <div class="col-md-8">
                    <input class="form-control-plaintext" value="@Id" readonly />
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Nome</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="editCustomer.Name" />
                    <span class="text-danger">@Errors["Name"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Email</label>
                <div class="col-md-8">
                    <input class="form-control" type="email" @bind="editCustomer.Email">
                    <span class="text-danger">@Errors["Email"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Telefone</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="editCustomer.Phone">
                    <span class="text-danger">@Errors["Phone"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Data de Nascimento</label>
                <div class="col-md-8">
                    <input class="form-control" type="date" @bind="editCustomer.DateOfBirth">
                    <span class="text-danger">@Errors["DateOfBirth"]?[0]</span>
                </div>
            </div>

            <div class="row">
                <div class="offset-md-4 col-md-4 d-grid">
                    <button class="btn btn-primary" @onclick="SaveCustomer">Salvar</button>
                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-outline-primary" href="/Customer">Cancelar</a>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public CustomerResponse? customer = null;
    public EditCustomerResponse editCustomer { get; set; } = new();
    public JsonNode Errors { get; set; } = new JsonObject();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            customer = await Http.GetFromJsonAsync<CustomerResponse>($"https://localhost:44344/api/Customer/{Id}");
            if (customer != null)
            {
                editCustomer.Name = customer.Name;
                editCustomer.Email = customer.Email;
                editCustomer.Phone = customer.Phone;
                editCustomer.DateOfBirth = customer.DateOfBirth;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception : " + ex.Message);
        }
    }

    protected async Task SaveCustomer()
    {
        var response = await Http.PutAsJsonAsync($"https://localhost:44344/api/Customer/{Id}", editCustomer);

        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Customer");
        }
        else
        {
            var strResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Json Response: \n" + strResponse);

            try
            {
                var jsonResponse = JsonNode.Parse(strResponse);
                Errors = jsonResponse?["errors"] ?? new JsonObject();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erro ao processar a resposta de erro: " + ex.Message);
            }
        }
    }
}